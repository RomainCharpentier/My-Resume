{"version":3,"sources":["logo.svg","components/GitRepository.js","components/GitRepositoryList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GitRepository","console","log","this","props","repo","href","clone_url","name","description","a","b","updated_at","Component","GitRepositoryList","state","performSearch","bind","axios","get","then","response","setState","repos","data","forceUpdate","catch","error","results","length","sort","compare","map","key","id","ListGroup","App","className","src","logo","alt","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,+PCEtBC,E,iLAUb,OADAC,QAAQC,IAAIC,KAAKC,MAAMC,MAEnB,6BACI,uBAAGC,KAAMH,KAAKC,MAAMC,KAAKE,WAAYJ,KAAKC,MAAMC,KAAKG,MACrD,2BAAIL,KAAKC,MAAMC,KAAKI,iB,+BAXjBC,EAAGC,GACd,OAAID,EAAEE,WAAaD,EAAEC,YAAoB,EACrCF,EAAEE,WAAaD,EAAEC,WAAmB,EACjC,M,GAL4BC,aCGtBC,E,YAEjB,WAAYV,GAAO,IAAD,8BACd,4CAAMA,KACDW,MAAQ,GACb,EAAKC,cAAcC,KAAnB,gBAHc,E,iFAOdd,KAAKa,kB,sCAGQ,IAAD,OACZE,IAAMC,IAAN,wDACKC,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVC,MAAOF,EAASG,OAEpB,EAAKC,iBAERC,OAAM,SAAAC,GACH1B,QAAQC,IAAI,kCAAmCyB,Q,+BAKvD,IACIJ,EADEK,EAAUzB,KAAKY,MAAMQ,MAQ3B,OANIK,GAAWA,EAAQC,OAAS,IAC5BD,EAAQE,KAAK9B,EAAc+B,SAC3BR,EAAQK,EAAQI,KAAI,SAAA3B,GAAI,OAAI,kBAAC,EAAD,CAAe4B,IAAK5B,EAAK6B,GAAI7B,KAAMA,QAK/D,kBAAC8B,EAAA,EAAD,KACKZ,O,GApC8BV,aCA1BuB,E,iLAGb,OACI,yBAAKC,UAAU,OACX,yCACA,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,kBAAC,EAAD,W,GAPiBC,IAAM5B,WCOnB6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.07fa5249.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nexport default class GitRepository extends Component {\r\n\r\n    static compare(a, b) {\r\n        if (a.updated_at > b.updated_at) return -1;\r\n        if (a.updated_at < b.updated_at) return 1;\r\n        return 0;\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.repo);\r\n        return(\r\n            <div>\r\n                <a href={this.props.repo.clone_url}>{this.props.repo.name}</a>\r\n                <p>{this.props.repo.description}</p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { ListGroup } from \"react-bootstrap\";\r\nimport GitRepository from './GitRepository.js';\r\n\r\nexport default class GitRepositoryList extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {}\r\n        this.performSearch.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.performSearch();\r\n    }\r\n\r\n    performSearch() {\r\n        axios.get(`https://api.github.com/users/RomainCharpentier/repos`)\r\n            .then(response => {\r\n                this.setState({\r\n                    repos: response.data\r\n                });\r\n                this.forceUpdate(); // call render()\r\n            })\r\n            .catch(error => {\r\n                console.log('Error fetching and parsing data', error);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const results = this.state.repos;\r\n        let repos;\r\n        if (results && results.length > 0) {\r\n            results.sort(GitRepository.compare);\r\n            repos = results.map(repo => <GitRepository key={repo.id} repo={repo} />);\r\n        } else {\r\n            //repos = <NoRepos />\r\n        }\r\n        return(\r\n            <ListGroup>\r\n                {repos}\r\n            </ListGroup>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GitRepositoryList from './components/GitRepositoryList';\n\nexport default class App extends React.Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>My Resume</h1>\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <GitRepositoryList />\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}