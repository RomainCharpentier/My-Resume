{"version":3,"sources":["components/LangButton.js","components/GitRepository.js","components/GitRepositoryList.js","pages/MainPage.js","pages/NotFoundPage.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["LangButton","props","handleChange","event","setState","value","setLanguage","target","state","selectedValue","bind","RadioGroup","aria-label","name","this","onChange","FormControlLabel","control","Radio","label","Component","GitRepository","Link","color","href","repo","clone_url","Typography","description","a","b","updated_at","GitRepositoryList","performSearch","axios","get","then","response","repos","data","forceUpdate","catch","error","console","log","results","length","sort","compare","map","key","id","List","Copyright","variant","align","Date","getFullYear","MainPage","Container","maxWidth","Box","my","Avatar","src","component","gutterBottom","t","param","translate","NotFoundComponent","React","App","toggleDarkTheme","newPaletteType","theme","palette","type","className","ThemeProvider","createMuiTheme","CssBaseline","logo","alt","basename","exact","path","NotFoundPage","onClick","Boolean","window","location","hostname","match","setDefaultTranslations","fr","en","setDefaultLanguage","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8865aaaf.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { setLanguage } from 'react-multi-lang';\r\nimport { RadioGroup, Radio, FormControlLabel } from '@material-ui/core';\r\n\r\nclass LangButton extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          selectedValue: 'fr'\r\n        };\r\n        this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n            value: 'fr'\r\n        });\r\n        setLanguage(event.target.value);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <RadioGroup\r\n                aria-label=\"language\"\r\n                name=\"language1\"\r\n                value={this.state.value}\r\n                onChange={this.handleChange}\r\n            >\r\n                <FormControlLabel value=\"fr\" control={<Radio />} label=\"FR\" />\r\n                <FormControlLabel value=\"en\" control={<Radio />} label=\"EN\" />\r\n            </RadioGroup>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LangButton;\r\n                    ","import React, { Component } from 'react';\r\nimport { Link, Typography } from '@material-ui/core';\r\n\r\nexport default class GitRepository extends Component {\r\n\r\n    static compare(a, b) {\r\n        if (a.updated_at > b.updated_at) return -1;\r\n        if (a.updated_at < b.updated_at) return 1;\r\n        return 0;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Link color=\"textPrimary\" href={this.props.repo.clone_url}>{this.props.repo.name}</Link>\r\n                <Typography color=\"textSecondary\">{this.props.repo.description}</Typography>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport GitRepository from './GitRepository.js';\r\nimport { List } from '@material-ui/core';\r\n\r\nexport default class GitRepositoryList extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {}\r\n        this.performSearch.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.performSearch();\r\n    }\r\n\r\n    performSearch() {\r\n        axios.get(`https://api.github.com/users/RomainCharpentier/repos`)\r\n            .then(response => {\r\n                this.setState({\r\n                    repos: response.data\r\n                });\r\n                this.forceUpdate(); // call render()\r\n            })\r\n            .catch(error => {\r\n                console.log('Error fetching and parsing data', error);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const results = this.state.repos;\r\n        let repos;\r\n        if (results && results.length > 0) {\r\n            results.sort(GitRepository.compare);\r\n            repos = results.map(repo => <GitRepository key={repo.id} repo={repo} />);\r\n        }\r\n        return(\r\n            <List >\r\n                {repos}\r\n            </List >\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport GitRepositoryList from '../components/GitRepositoryList';\r\nimport { translate } from 'react-multi-lang';\r\nimport LangButton from '../components/LangButton';\r\nimport { Box, Container, Link, Typography, Avatar } from '@material-ui/core';\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright Â© '}\r\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                Your Website\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nclass MainPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Container maxWidth=\"sm\">\r\n                <Box my={4}>\r\n                    <Avatar src='https://avatars2.githubusercontent.com/u/35954925?s=460&v=4' />\r\n                    <Typography color='textPrimary' variant=\"h4\" component=\"h1\" gutterBottom>\r\n                        {this.props.t('home.Title', {param: 'react'})}\r\n                    </Typography>\r\n                    <GitRepositoryList />\r\n                    <LangButton />\r\n                    <Copyright />\r\n                </Box>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default translate(MainPage);","import React from \"react\";\r\n\r\nexport default class NotFoundComponent extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n            <h3>Go back traveler, you've gone too far</h3>\r\n        </div>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { translate } from 'react-multi-lang';\nimport LangButton from './components/LangButton';\nimport { CssBaseline, Container, Link, Typography, Avatar, ThemeProvider, useMediaQuery, createMuiTheme } from '@material-ui/core';\nimport MainPage from './pages/MainPage';\nimport NotFoundPage from './pages/NotFoundPage';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          theme: {\n            palette: {\n                type: \"dark\"\n            }\n          }\n        };\n        this.toggleDarkTheme.bind(this);\n    }\n\n     // we change the palette type of the theme in state\n    toggleDarkTheme = () => {\n        let newPaletteType = this.state.theme.palette.type === \"light\" ? \"dark\" : \"light\";\n        this.setState({\n            theme: {\n                palette: {\n                    type: newPaletteType\n                }\n            }\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <ThemeProvider theme={createMuiTheme(this.state.theme)}>\n                    <CssBaseline />\n                    <img src={logo} className='App-logo' alt='logo' />\n                    <Router basename=\"/\">\n                        <Switch>\n                            <Route exact path=\"/\" component={MainPage} />\n                            <Route component={NotFoundPage} />\n                        </Switch>\n                        <button onClick={this.toggleDarkTheme}>change</button>\n                    </Router>\n                </ThemeProvider>\n            </div>\n        );\n    }\n}\n\nexport default translate(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { setDefaultTranslations, setDefaultLanguage } from 'react-multi-lang'\r\nimport fr from './translations/fr.json'\r\nimport en from './translations/en.json'\r\n\r\nsetDefaultTranslations({fr, en})\r\nsetDefaultLanguage('fr')\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}